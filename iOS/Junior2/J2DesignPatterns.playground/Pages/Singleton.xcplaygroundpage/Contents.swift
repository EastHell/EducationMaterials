/*:
 [Previous](@previous)

 ---

 # Singleton (Одиночка)

 ---

 Одиночка - паттерн, который гарантирует, что у класса будет только один экземпляр и предоставляет к нему глобальную точку
 доступа
 */
class Singleton {
    static let shared: Singleton = {
        let instance = Singleton()

        return instance
    }()

    private init() { }
}
/*:
 Необходим, если имеет смысл держать единственный экземпляр класса

 Достоинства:
 - Избавляет от постоянной переинициализации объекта, что может помочь, если происходит частая работа с объектом, инициализация
 которого ресурсоемка.
 - Гарантирует наличие единственного экземпляра объекта.

 Недостатки:
 - На самом деле не гарантируется, что экземпляр объекта будет единственным, поскольку возможно копирование
 - Поскольку экземпляр один на все приложение, могут возникнуть проблемы при использовании в разных потоках если класс
 содержит методы взаимодействия с разделяемыми данными. В таком случае работу с ними необходимо синхронизировать.

 ---

 [Next](@next)
 */
